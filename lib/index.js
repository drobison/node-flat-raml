// Generated by CoffeeScript 1.9.1
(function() {
  var FS, Q, flattenRamlDoc, objToRaml, openWriteStream, parseRaml, parser, ramlAsString, serializeRaml, writeRaml;

  FS = require('fs');

  Q = require('q');

  parser = require('raml-parser');

  objToRaml = require('raml-object-to-raml');

  openWriteStream = function(outFile) {
    var deferred, error;
    deferred = Q.defer();
    try {
      deferred.resolve(FS.createWriteStream(outFile));
    } catch (_error) {
      error = _error;
      deferred.reject(error);
    }
    return deferred.promise;
  };

  parseRaml = function(inFile) {
    var deferred, error;
    deferred = Q.defer();
    try {
      parser.loadFile(inFile).then((function(data) {
        return deferred.resolve(data);
      }), (function(error) {
        return deferred.reject(error);
      }));
    } catch (_error) {
      error = _error;
      deferred.reject(error);
    }
    return deferred.promise;
  };

  serializeRaml = function(ramlObj) {
    var deferred, error;
    deferred = Q.defer();
    try {
      deferred.resolve(objToRaml(ramlObj));
    } catch (_error) {
      error = _error;
      deferred.reject(error);
    }
    return deferred.promise;
  };

  writeRaml = function(serialized, outFile) {
    var deferred, error;
    deferred = Q.defer();
    try {
      FS.writeFile(outFile, serialized, function(err) {
          if (err) throw err;
          deferred.resolve(outFile);
      });
    } catch (_error) {
      error = _error;
      deferred.reject(error);
    }
    return deferred.promise;
  };

  ramlAsString = function(inFile) {
    return parseRaml(inFile).then(function(data) {
      return serializeRaml(data);
    });
  };

  flattenRamlDoc = function(inFile, outFile) {
    return ramlAsString(inFile).then(function(serialized) {
      return writeRaml(serialized, outFile);
    });
  };

  module.exports = {
    flatten: flattenRamlDoc,
    asString: ramlAsString
  };

}).call(this);
